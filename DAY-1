1.SET MATRIX ZEROES 
BRUTE FORCE
class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;

        
        boolean[] rowZeroes = new boolean[n];
        boolean[] colZeroes = new boolean[m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == 0) {
                    rowZeroes[i] = true;
                    colZeroes[j] = true;
                }
            }
        }

        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (rowZeroes[i] || colZeroes[j]) {
                    matrix[i][j] = -1;
                }
            }
        }

        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == -1) {
                    matrix[i][j] = 0;
                }
            }
        }
    }
}
TIME COMPLEXITY =(N+M)^3
OPTIVE METHOD
class Solution {
    public void setZeroes(int[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int col=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                
                if(matrix[i][j]==0){
                    if(j!=0){
                    matrix[0][j]=0;
                    }
                    else{
                        col=0;
                    }
                    matrix[i][0]=0;
                }
            }
        }
    
        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){
                if(matrix[i][j]!=0){
                if(matrix[0][j]==0||matrix[i][0]==0){
                        matrix[i][j]=0;
                }
                }
            }
    }
    if(matrix[0][0]==0){
        for(int j=0;j<m;j++){
            matrix[0][j]=0;
        }
    }
     if(col==0){
        for(int i=0;i<n;i++){
            matrix[i][0]=0;
        }
    }
   
}
}
2.pascal triangle
class Solution {
    public List<List<Integer>> generate(int n) {
         List<List<Integer>> ans = new ArrayList<>();

        for(int i=1;i<=n;i++){
            List<Integer>tp=new ArrayList<>();
            for(int j=1;j<=i;j++){
                    tp.add(ncr(i-1,j-1));
            }
            ans.add(tp);
        }
        return ans;
    }
    public static int ncr(int n,int r){
        int  st = 1;
        
        for (int i = 0; i < r; i++) {
            st = st * (n - i);
            st = st / (i + 1);
        }
        return  st;
    }
}
